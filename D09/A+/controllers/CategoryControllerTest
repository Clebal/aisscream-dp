package controllers;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import services.CategoryService;

import controllers.administrator.CategoryAdminController;
 
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ContextConfiguration(locations = { "classpath:spring/junit.xml" })
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
public class CategoryControllerTest{

	private MockMvc mockMvc;
	
	// Controller to test
	@Autowired
	private CategoryAdminController categoryAdminController;
	
	@Autowired
	private CategoryService	categoryService;
	 
    @Before
    public void beforeTest() {
      mockMvc = MockMvcBuilders.standaloneSetup(categoryAdminController)
    		  .build();
    }
    
    @Test
    public void shouldReturnHttpCode200OnGet() throws Exception {
    
      Integer parentCategories;
      
      parentCategories = categoryService.getParentCategories().size();
    	
      mockMvc.perform(get("/category/admin/list"))
       .andExpect(status().isOk())
       .andExpect(view().name("category/list"))
       .andExpect(forwardedUrl("category/list"))
       .andExpect(model().attribute("categories", hasSize(parentCategories)))
       .andExpect(model().attribute("categories", hasItem(
               allOf(
                       hasProperty("name", is("Selva")),
                       hasProperty("description", is("En la selva hay muchos suspensos"))
               )
       )))
       .andExpect(model().attribute("categories", hasItem(
               allOf(
                       hasProperty("name", is("Playa")),
                       hasProperty("description", is("Es a donde no iremos si suspendemos DP. "))
               )
       )));      
    }


}
